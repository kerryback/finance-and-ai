---
title: ""
page-layout: full
title-block-banner: false
---

<div style="text-align: center; margin: 2rem 0;">
  <img src="image3.png" alt="Teaching Finance with AI" style="max-width: 400px; width: 100%; height: auto;">
</div>

<div style="text-align: center; margin: 2rem 0; font-size: 1.5rem;">
  <a href="https://blog.kerryback.com" title="Blog" class="nav-icon" style="margin: 0 1rem; text-decoration: none;">
    <i class="bi bi-journal-text"></i>
  </a>
   <button id="theme-toggle" title="Toggle Light/Dark Theme" class="nav-icon" style="margin: 0 1rem; background: none; border: none; font-size: 1.5rem; cursor: pointer;">
    <i class="bi bi-sun" id="theme-icon"></i>
  </button>
  <a href="#giscus" title="Discussions" class="nav-icon" style="margin: 0 1rem; text-decoration: none;">
    <i class="bi bi-chat-dots"></i>
  </a>
  <a href="https://mgmt675-2026.kerryback.com/MGMT675.pdf" target="_blank" title="Syllabus" class="nav-icon" style="margin: 0 1rem; text-decoration: none;">
    <i class="bi bi-mortarboard"></i>
  </a>
</div>

<style>
.nav-icon {
  color: #333;
  transition: color 0.3s ease;
}

[data-bs-theme="dark"] .nav-icon {
  color: #ffffff;
}

html {
  scroll-behavior: smooth;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const themeToggle = document.getElementById('theme-toggle');
  const themeIcon = document.getElementById('theme-icon');
  const htmlElement = document.documentElement;
  
  // Check for saved theme preference or default to 'light'
  const currentTheme = localStorage.getItem('theme') || 'light';
  htmlElement.setAttribute('data-bs-theme', currentTheme);
  
  // Update icon based on current theme
  function updateIcon() {
    const theme = htmlElement.getAttribute('data-bs-theme');
    if (theme === 'dark') {
      themeIcon.className = 'bi bi-moon';
    } else {
      themeIcon.className = 'bi bi-sun';
    }
  }
  
  updateIcon();
  
  // Toggle theme on button click
  themeToggle.addEventListener('click', function() {
    const currentTheme = htmlElement.getAttribute('data-bs-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    htmlElement.setAttribute('data-bs-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    updateIcon();
  });
});
</script>


The purpose of this site is to share some experiences and thoughts about teaching MBA  students how generative AI can and is being used in the finance industry and how they can leverage it to be more efficient in the workplace.  We are all learning this on the fly, and of course things are evolving very quickly, so I'm hoping that sharing will be useful.  I invite everyone to share in the comments section below.  

I teach a six-week 18-contact-hour course to first year MBAs in the last part of their first year.  For the most part, I do not teach new financial concepts in the course, because we have other courses for those.  However, I try to reinforce students' understanding of concepts they have already seen by approaching them with a different tool (AI + coding).  The course caps a first-year sequence consisting of a one-semester core course in the fall followed by an 'Applied Finance' course in the first part of the spring that goes deeper into some of the topcs covered in the core course and develops spreadsheet modeling skills, and then my course in the last part of the spring that covers the same topics again, but using AI + coding instead of spreadsheets.  I will describe that course in particular, but many of the observations below should apply to courses in other formats and to courses for different student groups.

## Tools

Students can use any chatbot for the first part of the course.  Then, the course switches to using Google Colab, which is a free Python environment in the cloud that has built-in Google Gemini assistance.  There is no software to install, so there is no set-up required.  I prepared some materials to show students how to [use Google Colab](), which I cover when we get to that point.

For the last part of the course, students need an OpenAI account.  They can use the free version.  They will need to get an API key, for which charges are on a per-usage basis.  The charges are minimal for the experimentation that is done in the course.  

Previously, I used [Julius.ai](https://julius.ai) instead of Google Colab  It is a bit simpler to use, because it is a simple chatbot interface rather than a Jupyter notebook - see my [blog post about Julius](https://kerryback.substack.com/p/07-mean-variance-analysis).  Julius also provides access to LLMs from OpenAI and Anthropic, whereas Colab only offers Google Gemini.  However, while Anthropic's Claude is still the best coding LLM, Gemini has caught up considerably and is now a solid choice.  Furthermore, Colab offers several advantages: it is free, it produces Jupyter notebooks that are portable, and it can deploy apps to the cloud. 

## Main Topics 

The course covers the following topics:

1. Prompt engineering
2. Corporate implementations of AI
3. Using AI to write code for financial analysis, visualization, and report generation
4. Using AI to create apps to automate the above
5. Using AI to create custom chatbots for the above 
6. Understanding AI agents and their capabilities
7. In-depth study of using AI for DCF valuation of companies
 

## 1. Prompt Engineering

A good demonstration at the start of a course on Finance with AI is to upload a company's annual report to ChatGPT (or a different chatbot) and ask it for an investment analysis in the form of a Word document.  You can ask the chatbot to include the following:

- a summary of the annual report 
- a comparison of the firm to peer firms
- a two-stage DCF analysis formed by extrapolating trends 
- a sensitivity analysis focused on the items for which extrapolation might be most unreasonable 
- a buy/hold/sell recommendation 

This example illustrates the power of AI 'out of the box' for financial analysis.  It also explains why we are seeing so many stories about the potential demise of junior financial analysts.  Of course, the AI is not perfect.  We should engage our students in a discussion of how the report can be improved.  

Compile the responses to build a more detailed prompt than the original prompt, start a new chatbot session (so the LLM will have no memory of the original prompt and response^[LLMs do not actually remember past prompts and responses in a session.  Instead the record of past prompts and responses in a session is sent by a chatbot to an LLM along with each new prompt, so that the LLM can use the record of past prompts and responses when generating a new response.]), and submit the new prompt.  Compare the results.  Get students to discuss how they might further improve the new prompt.  Then, point out that the eventual prompt that they form through this iterative process can be saved as a text file and uploaded each time they want to generate this type of report.  This is **prompt engineering.** 

## 2. Corporate Implementations of AI

The HBS case about [Implementing AI at Deloitte](https://hbsp.harvard.edu/product/HEC382-PDF-ENG) is a good foundation for a class discussion of AI implementation.  It covers the issues of data privacy, compliance, client trust, reliability, biases, and employee buy-in.  It also describes how Deloitte set up a custom chatbot.  

This widely cited [MIT Study](https://mlq.ai/media/quarterly_decks/v0.1_State_of_AI_in_Business_2025_Report.pdf) is also must reading.  It has been described in the media as reporting that 95% of corporate AI implementations fail.  What it actually says is that only 5% of corporate AI pilots reach production, which is not quite the same thing.  The reasons that most pilots are abandoned and the characteristics of successful pilots are informative.  Also key is this passage: "workers from over 90% of the companies we surveyed reported regular use of 
personal AI tools for work tasks. In fact, almost every single person used an LLM in some 
form for their work."  So, AI is being widely used, despite the difficulties companies have faced in designing and implementing company-specific AI solutions.  

Another very interesting study is [this study](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5188231) about the use of AI in corporate teams.  The study is described by one of the authors [here](https://www.oneusefulthing.org/p/the-cybernetic-teammate).  They conclude that, instead of thinking of AI as a tool, it should be regarded as a teammate.  They find that that one person working with AI is at least as efficient as two people working in a team without AI.  The most effective combination is naturally a team with AI.  Interestingly, they find that AI enables workers and teams to break functional silos, performing like teams composed of individuals with diverse functional knowledge.

## 3. AI-Generated Code

Two good exercises for seeing how AI-generated code can be used to perform financial analysis are mean-variance analysis and CAPM cost of capital calculations.  I demo the first and assign the second as a group project.  AI can write code to get data from Yahoo Finance, calculate returns, and perform the analyses, assuming we are willing to trust sample moments in mean-variance analysis.  We could also input risk and risk premia assumptions directly for mean-variance analysis rather than calculating sample moments.  See my blog posts about [getting data from Yahoo Finance](https://kerryback.substack.com/p/02-online-data), [mean-variance analysis](https://kerryback.substack.com/p/07-mean-variance-analysis), and [calculating the cost of capital](https://kerryback.substack.com/p/04-capm-cost-of-capital). 

There are natural visualization components to both exercises, namely the plot of the mean-variance frontier and the CAPM scatter plot and regression line.  AI can write python code to generate Word docs and/or PowerPoint decks containing the analyses and visualizations.  See this post about [generating Word docs and PowerPoint decks](https://kerryback.substack.com/p/05-building) and this post about [visualizations](https://kerryback.substack.com/p/03-visualize).    

There is a lot that could be done on option pricing if students have seen options already.  As remarked above, I teach a first-year class, and I can't preempt what will be taught to second-year students.  Except for that issue, I would certainly spend some time on options.

## 4. Building Apps

Whatever code an LLM writes for an exercise in Part 1 can be encapsulated in an app and made broadly available, so people can use the code without needing to go to Julius or Colab or any other Python platform.  The Python Streamlit library makes app construction easy.  The same is true of the Gradio library apparently, but I only have experience with Streamlit.  See my [blog post about creating apps](https://substack.com/home/post/p-163644611).

Streamlit apps can be deployed to the cloud from Google Colab using the ngrok service.  Students will need to create free accounts at [ngrok](https://ngrok.com)
and get an [authorization token](https://dashboard.ngrok.com/get-started/your-authtoken).  They should save their authorization tokens as secret keys in Google Colab (they can ask Gemini how to do that).  Then, they can tell Gemini to deploy apps using ngrok.

Deployment by ngrok is sufficient to illustrate the concept of building apps, but it is not a permanent deployment.  It is probably best to leave permanent deployment as something for students to explore on their own or perhaps to cover in a special session, because it can be a bit complex.  The best solution I have found is to install [Claude Code](https://www.anthropic.com/claude-code) and ask it to do it. However, students will need assistance even to install and use Claude Code.  See my discussion of [setting up and installing Claude Code](https://substack.com/home/post/p-163644611).  

At this point in the course, students have seen enough to compare the following ways to perform a financial analysis:

- Using Excel
- Asking a chatbot
- Using AI + coding via Google Colab'
- Creating and using an app

This provides the foundation for an informative class discussion about the relative merits of each approach and the circumstances in which one approach is better than another.

## 5. Custom Chatbots

Custom chatbots involve 

- A user interface
- An API connection to an LLM
- A customization of user prompts
  - System prompt
  - Possible retrieval of documents
- Possible uses of tools
- Possible fine tuning

Creating a user interface is a variation of building an app and has already been essentially covered.  Creating an API connection to an LLM is similar to setting up ngrok as covered in the second topic.  Finally, the prompt that was saved as a text file in the course introduction can easily be used to create an example of a system prompt.  So, a simple custom chatbot of **user interface + API connection + system prompt** requires only techniques that students have already seen at this point.

Students can get API keys from OpenAI even with free accounts, or they can get API keys from Anthropic or Google.  They can ask any chatbot how to do it.  They should save their API keys as secret keys in Google Colab in the same way they saved their ngrok keys.  They will be charged on a per-usage basis, but the charges will be trivial for the experimentation that is done in the course.  It is also possible to get a free API key from [Open Router](https://openrouter.ai) and to use free open source LLMS from [Hugging Face](https://huggingface.co), so there are no charges at all.

Once an API key is installed on Colab, students can ask Gemini to connect to the LLM and send a prompt and get a response.  Gemini will probably import the openai Python package even for using other LLMs, because the OpenAI API has become the standard.  The code that Gemini has to write to use the openai package is extremely simple and transparent, and it is useful for students to see it.

As a next step, students can ask Gemini in Google Colab to create a custom chatbot using Streamlit and ngrok.  A good example for a system prompt is to ask the LLM to respond in a foreign language, so students can see that the system prompt actually works.  It is important that Gemini build a loop in the app that collects all past prompts and responses and sends them together with the system prompt with each new prompt.  If the chatbot does not seem to be remembering past prompts during a session, it is because the loop was not constructed.  Students should ask Gemini to add the loop if this occurs.

For a first financial chatbot, we can return to the mean-variance or cost of capital exercise.  The apps created before can be recreated as chatbots, so users can ask for what they want in natural language instead of using input fields on an app.  Here, I use OpenAI's API with the Code Interpreter tool enabled.  The code that performed the calculations in the app can be uploaded in the system prompt with instructions to run it with the Code Interpreter to answer the user's questions.  

The mean-variance analysis and cost of capital calculations are simple examples, but they provide a good foundation to discuss the following questions.

-  For what types of analyses would a custom chatbot work better than an app?
-  For what types of analyses is it worthwhile to create a custom chatbot rather than using a standard chatbot?

## 6. AI Agents

An AI agent is a more sophisticated form of AI assistant that can autonomously perform complex, multi-step tasks with minimal human intervention. Unlike traditional chatbots that respond to prompts one at a time, agents can break down complex problems, create plans, execute multiple steps, use various tools, and adapt their approach based on intermediate results.

### Key Characteristics of AI Agents

**Autonomy**: Agents can work independently once given a goal. For example, instead of asking step-by-step how to value a company, you could tell an agent "Perform a DCF valuation of Apple" and it would autonomously gather data, perform calculations, create visualizations, and generate a report.

**Tool Use**: Agents can use multiple tools and APIs. A financial analysis agent might use Yahoo Finance for data, Python for calculations, web search for industry information, and document generation tools for creating reports - all without explicit instructions for each step.

**Planning and Reasoning**: Agents create and execute plans. Given a task like "Compare the financial health of three tech companies," an agent would plan the analysis approach, determine what metrics to calculate, and decide how to present the comparison.

**Memory and Context**: Advanced agents maintain context across sessions and can learn from past interactions, making them more effective over time.

### Examples in Finance

A portfolio management agent could continuously monitor market conditions, rebalance portfolios based on predetermined criteria, generate performance reports, and alert managers to significant events - all autonomously.

An earnings analysis agent could automatically retrieve quarterly reports when released, compare results to analyst expectations, identify key trends and anomalies, and draft an initial analysis report for human review.

### Building Agents

Students can experiment with agent frameworks like LangChain or AutoGPT using the OpenAI API. A simple agent can be created by combining:
- A planning module that breaks down tasks
- Tool-calling capabilities for data retrieval and calculations  
- A execution loop that works through the plan
- Error handling and adaptation mechanisms

While we don't have time to build sophisticated agents in this course, understanding their potential is crucial as they represent the future of AI-assisted financial analysis.

## 7. AI-Assisted DCF Valuation

We started the course by asking a chatbot to do a DCF analysis.  We return to the same question now with new tools in our belt.  A good question to pose is: How can we best build a chatbot to assist us in valuing a company?  At least a week and perhaps two weeks should be dedicated to this question.

I like the HBS case [Valuing Walmart 2010](https://hbsp.harvard.edu/product/W11058-PDF-ENG).  The approach that the case guides students to use is too simplistic, so I mostly ignore it.  I like the case because everyone has some understanding of where Walmart's value comes from, and we can have meaningful discussions of possible future growth rates.

I start this part of the course by sketching a valuation analysis on the board with student input and discussion.  We have to decide what ratios and growth rates we will use to generate pro forma statements and what assumptions we will make about them.

After the in-class discussion, I upload the financial statements in the case to ChatGPT and ask it for a DCF valuation.  Then, I read the statements into Google Colab and ask Gemini to assist with a valuation.  At this point, students are prepared to discuss whether and how we can create a useful valuationassistant using an app or custom chatbot.  

To use the app or custom chatbot, we will need to have a data source.  It is easy to get data from Yahoo Finance.  Alternatively, users can be asked to upload data.  It may also be possible to use other data sources, if there are available sources with APIs that can be used by the chatbot.

I assign creating a valuation assistant chatbot as the final group project for the course, worth 50% of the total grade.  I require the chatbots to include a facility for uploading financial statements.  Also, students must use the OpenAI API with the Code Interpreter tool enabled.  

I use the last class day for testing and demonstrations.  I give each group the same company and data to evaluate and give them a fixed amount of time to use their assistants to attempt generate a valuation (breaking out into groups).  Then, we reconvene, and each group shows the class how their tool performed, by scrolling through their chat history and explaining their process. 


## Discussions {#giscus}

Please share your thoughts, experiences, or questions about teaching AI-assisted finance in the comments below.  
